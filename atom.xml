<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hzscoder&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-11-14T15:28:39.316Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hzscoder</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springboot 自定义多数据源starter</title>
    <link href="http://yoursite.com/2021/11/07/springboot-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90starter/"/>
    <id>http://yoursite.com/2021/11/07/springboot-自定义多数据源starter/</id>
    <published>2021-11-07T03:54:07.000Z</published>
    <updated>2021-11-14T15:28:39.316Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在SaaS应用的多租户场景中，需要我们的服务支持动态切换数据源。但是在微服务场景中，每个微服务都需要根据租户的不同链接到对应的数据库中。</p><p>我们不可能为每个服务都去进行繁琐的配置，这样也达不到系统解耦的目的。从而我们自定义一个独立的数据源starter，专门负责我们多数据源的管理与切换，作为我们整个架构数据源的一站式解决方案。这样其他服务只需要专心负责业务服务，系统耦合度大大下降。</p><p>下面详细介绍实现一个 <code>**multi-datasource-spring-boot-starter</code>** 来进行数据源相关操作。</p><h3 id="实现springframework的数据源管理类AbstractRoutingDataSource"><a href="#实现springframework的数据源管理类AbstractRoutingDataSource" class="headerlink" title="实现springframework的数据源管理类AbstractRoutingDataSource"></a>实现springframework的数据源管理类<code>AbstractRoutingDataSource</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于保存租户key和数据源的映射关系，目标数据源map的拷贝</span></span><br><span class="line"><span class="comment">     * 因为父类该map为peivate且没有提供get方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Object, Object&gt; targetDataSources;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDefaultTargetDataSource</span><span class="params">(@Nonnull Object defaultTargetDataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setDefaultTargetDataSource(defaultTargetDataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTargetDataSources</span><span class="params">(@Nonnull Map&lt;Object, Object&gt; targetDataSources)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.targetDataSources = targetDataSources;</span><br><span class="line">        <span class="keyword">super</span>.setTargetDataSources(targetDataSources);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">getTargetDataSources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> targetDataSources;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDataSource</span><span class="params">(Object key, Object dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.targetDataSources.put(key, dataSource);</span><br><span class="line">        <span class="keyword">super</span>.setTargetDataSources(targetDataSources);</span><br><span class="line">        <span class="keyword">super</span>.afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nonnull</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DataSource <span class="title">determineTargetDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.notNull(<span class="keyword">this</span>.targetDataSources, <span class="string">"DataSource router not initialized"</span>);</span><br><span class="line">        DruidDataSource dataSource;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataSource = (DruidDataSource) <span class="keyword">super</span>.determineTargetDataSource();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalStateException exception)&#123;</span><br><span class="line">            <span class="comment">// 数据源获取失败,可能是新加入的数据源,重新加载数据源</span></span><br><span class="line">            DataSourceLoader loader = ApplicationContextProvider.getBean(DataSourceLoader.class);</span><br><span class="line">            loader.addDataSource();</span><br><span class="line">            dataSource = (DruidDataSource) <span class="keyword">super</span>.determineTargetDataSource();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TenantContextHolder.getTenantKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类包含两个主要方法， <code>determineCurrentLookupKey()</code> 和 <code>determineTargetDataSource()</code>，前者负责决定数据源的关键字，后者根据得到的关键字从(key, datasource)的map中取出对应的数据源。</p><p>这里我们用ThreadLocal来存储当前的tenant id标识，后面利用拦截器来实现tenant id的动态切换。</p><h3 id="配置mybatis-plus"><a href="#配置mybatis-plus" class="headerlink" title="配置mybatis-plus"></a>配置mybatis-plus</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.naic.datasource.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"master"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">master</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dynamicDataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DynamicDataSource <span class="title">dynamicDataSource</span><span class="params">(@Qualifier(<span class="string">"master"</span>)</span>DataSource dataSource) </span>&#123;</span><br><span class="line">        DynamicDataSource dynamicDataSource = <span class="keyword">new</span> DynamicDataSource();</span><br><span class="line">        Map&lt;Object, Object&gt; dataSourceMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        dataSourceMap.put(<span class="string">"master"</span>, dataSource);</span><br><span class="line">        <span class="comment">// 将 master 数据源作为默认指定的数据源</span></span><br><span class="line">        <span class="comment">//dynamicDataSource.setDefaultTargetDataSource(dataSource);</span></span><br><span class="line">        <span class="comment">// 将 master 和 slave 数据源作为指定的数据源</span></span><br><span class="line">        dynamicDataSource.setTargetDataSources(dataSourceMap);</span><br><span class="line">        <span class="keyword">return</span> dynamicDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisSqlSessionFactoryBean <span class="title">sqlSessionFactoryBean</span><span class="params">(@Qualifier(<span class="string">"dynamicDataSource"</span>)</span> DynamicDataSource dataSource,</span></span><br><span class="line"><span class="function">                                                              @<span class="title">Qualifier</span><span class="params">(<span class="string">"paginationInterceptor"</span>)</span> PaginationInterceptor paginationInterceptor) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        MybatisSqlSessionFactoryBean sessionFactory = <span class="keyword">new</span> MybatisSqlSessionFactoryBean();</span><br><span class="line">        <span class="comment">// 重点，使分页插件生效</span></span><br><span class="line">        Interceptor[] plugins = <span class="keyword">new</span> Interceptor[<span class="number">1</span>];</span><br><span class="line">        plugins[<span class="number">0</span>] = paginationInterceptor;</span><br><span class="line">        sessionFactory.setPlugins(plugins);</span><br><span class="line">        <span class="comment">//配置数据源，此处配置为关键配置，如果没有将 dynamicDataSource作为数据源则不能实现切换</span></span><br><span class="line">        sessionFactory.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 扫描Model</span></span><br><span class="line">        <span class="comment">//sessionFactory.setTypeAliasesPackage("com.naic.datasource.mapper.*");</span></span><br><span class="line">        PathMatchingResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        <span class="comment">// 扫描映射文件</span></span><br><span class="line">        sessionFactory.setMapperLocations(resolver.getResources(<span class="string">"classpath*:mapper/**/*Mapper.xml"</span>));</span><br><span class="line">        <span class="keyword">return</span> sessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">(@Qualifier(<span class="string">"dynamicDataSource"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class="line">        <span class="comment">// 配置事务管理, 使用事务时在方法头部添加@Transactional注解即可</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        PaginationInterceptor paginationInterceptor = <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">        <span class="comment">// 开启 count 的join优化，只针对left join</span></span><br><span class="line">        paginationInterceptor.setCountSqlParser(<span class="keyword">new</span> JsqlParserCountOptimize(<span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">return</span> paginationInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们做了三件事</p><ul><li>将yml中配置的默认数据源(存放租户数据库信息)加载，作为我们的默认数据源</li><li>初始化刚刚定义的 <code>DynamicDataSource</code> ，并加入IOC容器</li><li>将<code>DynamicDataSource</code> 设置为mybatis-plus的指定数据源。</li></ul><p>说明一点，因为我完全采用mybatis-plus操作数据库，所以在mybatis-plus配置里是访问不了数据库的(mapper需要mybatis或mybatis-plus配置导入)，只能将master数据源先导入，之后再延时加载数据库表中的其他数据源。于是又定义了一个 <code>DataSourceLoader</code> 来负责数据源的读取和更新。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureAfter</span>(MyBatisPlusConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DynamicDataSource dynamicDataSource;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DataSource defaultDataSource;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TenantMapper tenantMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataSourceLoader</span><span class="params">(DynamicDataSource dynamicDataSource, DataSource defaultDataSource, TenantMapper tenantMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dynamicDataSource = dynamicDataSource;</span><br><span class="line">        <span class="keyword">this</span>.defaultDataSource = defaultDataSource;</span><br><span class="line">        <span class="keyword">this</span>.tenantMapper = tenantMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;database.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String databaseName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;Object, Object&gt; dataSourceMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        dataSourceMap.put(<span class="string">"master"</span>, defaultDataSource);</span><br><span class="line">        List&lt;Tenant&gt; tenants = tenantMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        tenants.forEach(tenant -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (tenant.getStatus())&#123;</span><br><span class="line">                DruidDataSource source = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">                source.setUrl(DataSourceConstant.PREFIX + tenant.getHost() + <span class="string">":"</span> + tenant.getPort() + <span class="string">"/"</span> + databaseName + DataSourceConstant.SUFFIX);</span><br><span class="line">                source.setDriverClassName(tenant.getDriver());</span><br><span class="line">                source.setUsername(tenant.getUsername());</span><br><span class="line">                source.setPassword(tenant.getPassword());</span><br><span class="line">                dataSourceMap.put(tenant.getTenantId().toString(), source);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//设置数据源</span></span><br><span class="line">        dynamicDataSource.setTargetDataSources(dataSourceMap);</span><br><span class="line">        dynamicDataSource.afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Object key = TenantContextHolder.getTenantKey();</span><br><span class="line">        <span class="comment">// 切换到主数据源</span></span><br><span class="line">        TenantContextHolder.setTenantKey(<span class="string">"master"</span>);</span><br><span class="line">        List&lt;Tenant&gt; tenants = tenantMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        tenants.forEach(tenant -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (tenant.getStatus() &amp;&amp; ! dynamicDataSource.getTargetDataSources().containsKey(tenant.getTenantId()))&#123;</span><br><span class="line">                DruidDataSource source = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">                source.setUrl(DataSourceConstant.PREFIX + tenant.getHost() + <span class="string">":"</span> + tenant.getPort() + <span class="string">"/"</span> + databaseName + DataSourceConstant.SUFFIX);</span><br><span class="line">                source.setDriverClassName(tenant.getDriver());</span><br><span class="line">                source.setUsername(tenant.getUsername());</span><br><span class="line">                source.setPassword(tenant.getPassword());</span><br><span class="line">                dynamicDataSource.addDataSource(tenant.getTenantId().toString(), source);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        TenantContextHolder.setTenantKey(key.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里利用@AutoConfigureAfter注解来指定在mybatis-plus之后再加载，这样就做到了延时读取数据源的目的。</p><p>补充一点，在 <code>DynamicDataSource</code> 之中为了确保可以在应用不重启的情况下，读取新加入的数据源，做了一个增加新数据源的功能，但是这里就需要一个 <code>DataSourceLoader</code> 实例或其他实例，但是因为我们在mybatis-plus配置之后再加载，所以这个实例在这里是获取不到的，所以采取了从容器中拿。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataSourceLoader loader = ApplicationContextProvider.getBean(DataSourceLoader.class);</span><br></pre></td></tr></table></figure><h3 id="拦截器实现数据源切换"><a href="#拦截器实现数据源切换" class="headerlink" title="拦截器实现数据源切换"></a>拦截器实现数据源切换</h3><p>最开始，我想利用aop切面来实现数据源的切换，对 <code>DynamicDataSource</code> 进行代理增强，但是失败了。最后我采取了web的拦截器来实现，当有请求到来时，将tenant id 存入ThreadLocal中。</p><p>这里还有一个关键点，因为有时网关也需要实现数据源的切换，从租户数据库中读取角色权限关系表，来进行鉴权操作。而gateway是基于webflux(reactive响应式web服务)的，所以我们的数据源一站式解决方式最好是支持webmvc和webflux两种，也就是servlet和reactive。</p><p><strong>支持webmvc</strong></p><p>我们定义我们的拦截逻辑，并将之加入到webmvc的拦截链中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(@Nonnull HttpServletRequest request, @Nonnull HttpServletResponse response, @Nonnull Object handler)</span> </span>&#123;</span><br><span class="line">        String tenantId = request.getHeader(DataSourceConstant.TENANT);</span><br><span class="line">        <span class="keyword">if</span> (! StringUtils.isEmpty(tenantId))&#123;</span><br><span class="line">            TenantContextHolder.setTenantKey(tenantId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = ConditionalOnWebApplication.Type.SERVLET)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebmvcInterceptorConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span></span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> DataSourceInterceptor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>支持webflux</strong></p><p>我们基于webflux实现一个WebFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = ConditionalOnWebApplication.Type.REACTIVE)</span><br><span class="line"><span class="meta">@Order</span>(-<span class="number">999</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebfluxInterceptorConfiguration</span> <span class="keyword">implements</span> <span class="title">WebFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nonnull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(@Nonnull ServerWebExchange exchange, @Nonnull WebFilterChain chain)</span> </span>&#123;</span><br><span class="line">        ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">        String tenantId = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;String&gt; tenantHeader = request.getHeaders().get(DataSourceConstant.TENANT);</span><br><span class="line">        <span class="keyword">if</span> (tenantHeader != <span class="keyword">null</span>)&#123;</span><br><span class="line">            tenantId = tenantHeader.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (! StringUtils.isEmpty(tenantId))&#123;</span><br><span class="line">            TenantContextHolder.setTenantKey(tenantId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Feign远程调用加上tenant-id"><a href="#Feign远程调用加上tenant-id" class="headerlink" title="Feign远程调用加上tenant id"></a>Feign远程调用加上tenant id</h3><p>在微服务架构中，微服务之间通信同样需要带上tenant id，我们可以定义一个feign的拦截器实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignInterceptor</span> <span class="keyword">implements</span> <span class="title">RequestInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(RequestTemplate template)</span> </span>&#123;</span><br><span class="line">        String tenant = TenantContextHolder.getTenantKey();</span><br><span class="line">        template.header(DataSourceConstant.TENANT, tenant);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，附上详细源码地址</p><p><a href="https://github.com/97999/MultiDataSource" target="_blank" rel="noopener">97999/MultiDataSource: 多数据源配置一站式解决方案 (github.com)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;在SaaS应用的多租户场景中，需要我们的服务支持动态切换数据源。但是在微服务场景中，每个微服务都需要根据租户的不同链接到对应的数据库中。&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring security访问鉴权</title>
    <link href="http://yoursite.com/2021/10/02/Spring-security%E8%AE%BF%E9%97%AE%E9%89%B4%E6%9D%83/"/>
    <id>http://yoursite.com/2021/10/02/Spring-security访问鉴权/</id>
    <published>2021-10-02T14:46:06.000Z</published>
    <updated>2021-10-03T13:37:44.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-security访问鉴权"><a href="#Spring-security访问鉴权" class="headerlink" title="Spring security访问鉴权"></a>Spring security访问鉴权</h1><p>介绍spring security源码理解和使用体会（2）</p><a id="more"></a><h2 id="单服务访问控制"><a href="#单服务访问控制" class="headerlink" title="单服务访问控制"></a>单服务访问控制</h2><p>Spring security支持在配置文件中配置固定访问角色控制，但在真实场景中，一般要用到<code>RBAC角色访问控制模型</code>，这就代表我们需要<code>动态角色资源管理</code>功能，必须扩展spring security的访问控制逻辑。</p><p>主要有以下三种实现方式。</p><ul><li>自定义Filter：MyFilterSecurityInterceptor</li></ul><ul><li>扩展access()的SpEL表达式：自定义授权逻辑userAuthentication是自定义的类，anthenticate是它的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置</span></span><br><span class="line">httpSecurity.authorizeRequests().anyRequest()</span><br><span class="line">               .access(<span class="string">"@userAuthentication.authenticate(request, authentication)"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鉴权实现类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:gateway.properties"</span>)</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAuthentication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, List&lt;Long&gt;&gt; permMap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;gateway.url.ignored&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; globalIgnoredList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PermRoleMapper permRoleMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resToCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 缓存系统权限角色关系</span></span><br><span class="line">        List&lt;PermRole&gt; perms = permRoleMapper.selectPermRoles();</span><br><span class="line">        <span class="keyword">if</span> (perms != <span class="keyword">null</span>)&#123;</span><br><span class="line">            perms.forEach((v) -&gt; permMap.put(v.getUrl(), v.getRoles()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">authenticate</span><span class="params">(HttpServletRequest request, Authentication authentication)</span> </span>&#123;</span><br><span class="line">        String url = request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">"请求的url"</span> + url);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(url))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 对应跨域的预检请求直接放行</span></span><br><span class="line">        <span class="keyword">if</span> ( HttpMethod.OPTIONS.toString().equals(request.getMethod())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 如果在白名单中</span></span><br><span class="line">        <span class="keyword">if</span> (MatchUtil.isMatchInList(url, globalIgnoredList))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 取出用户拥有角色</span></span><br><span class="line">        List&lt;String&gt; authorities = authentication.getAuthorities()</span><br><span class="line">                .stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 鉴权</span></span><br><span class="line">        PathMatcher pathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line">        <span class="keyword">for</span> (String pattern : permMap.keySet()) &#123;</span><br><span class="line">            <span class="comment">// 找到匹配资源</span></span><br><span class="line">            <span class="keyword">if</span> (pathMatcher.match(pattern, url)) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">// 遍历, 查找用户是否拥有角色</span></span><br><span class="line">                <span class="keyword">for</span> (Long perm : permMap.get(pattern)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (authorities.contains(perm.toString())) &#123;</span><br><span class="line">                        flag = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> flag;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没找到匹配资源，放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义<code>SecurityMetadataSource</code> 和 <code>AccessDecisionManager</code>.   自定义AccessDecisionManager .withObjectPostProcessor(new MyObjectPostProcessor()) .anyRequest().authenticated()</li></ul><p><img src="perm-flow.png" alt="spring security鉴权流程图"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtFilterInvocationSecurityMetadataSource</span> <span class="keyword">implements</span> <span class="title">FilterInvocationSecurityMetadataSource</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAttributes</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="comment">// 请求url</span></span><br><span class="line">String requestUrl = ((FilterInvocation) object).getRequestUrl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 资源控制列表</span></span><br><span class="line">        <span class="keyword">for</span> (ElstMenuInfo menu : allMenu) &#123;</span><br><span class="line">            <span class="keyword">if</span> (antPathMatcher.match(<span class="comment">/*匹配url*/</span>) &amp;&amp; menu.getRoles().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// String[] roleIds = 获取需要的角色列表</span></span><br><span class="line">                <span class="keyword">return</span> SecurityConfig.createList(roleIds);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有匹配，则默认全部可以访问</span></span><br><span class="line">        <span class="keyword">return</span> SecurityConfig.createList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAllConfigAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterInvocation.class.isAssignableFrom(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUrlAccessDecisionManager</span> <span class="keyword">implements</span> <span class="title">AccessDecisionManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication  当前用户凭证 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object  当前请求路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configAttributes  当前请求路径所需要的角色列表 -- &gt; 从 JwtFilterInvocationSecurityMetadataSource 返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AccessDeniedException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InsufficientAuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decide</span><span class="params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes)</span> <span class="keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException </span>&#123;</span><br><span class="line">        Iterator&lt;ConfigAttribute&gt; iterator = configAttributes.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            ConfigAttribute ca = iterator.next();</span><br><span class="line">            <span class="comment">//当前请求需要的权限</span></span><br><span class="line">            String needRole = ca.getAttribute();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(needRole)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当前用户所具有的权限</span></span><br><span class="line">            Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();</span><br><span class="line">            <span class="keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">                <span class="keyword">if</span> (authority.getAuthority().equals(needRole)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AccessDeniedException(<span class="string">"权限不足!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(ConfigAttribute attribute)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在配置文件中配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">        <span class="comment">// 登陆验证信息</span></span><br><span class="line">        http.authenticationProvider(jwtAuthenticationProvider)</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .withObjectPostProcessor(<span class="keyword">new</span> ObjectPostProcessor&lt;FilterSecurityInterceptor&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> &lt;O extends FilterSecurityInterceptor&gt; <span class="function">O <span class="title">postProcess</span><span class="params">(O object)</span> </span>&#123;</span><br><span class="line">                        object.setSecurityMetadataSource(filterInvocationSecurityMetadataSource);</span><br><span class="line">                        object.setAccessDecisionManager(accessDecisionManager);</span><br><span class="line">                        <span class="keyword">return</span> object;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// ......</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="微服务认证中心"><a href="#微服务认证中心" class="headerlink" title="微服务认证中心"></a>微服务认证中心</h2><p>一般在微服务架构中，可以基于Spring security做一个统一的认证中心。</p><p>用户登录请求到达认证中心后被授权，再进行资源的访问。</p><p>因为网关是微服务资源访问的统一入口，担任资源服务器的角色，所以在这里做资源访问的统一鉴权是再合适不过。</p><p><img src="filter-flow.png" alt="gateway鉴权流程图"></p><p>在网关实现鉴权，可以定义filter，拦截用户请求角色是否转发到对应的资源服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:gateway.properties"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, List&lt;Long&gt;&gt; permMap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;gateway.url.ignored&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; globalIgnoredList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PermRoleMapper permRoleMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resToCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 缓存系统权限角色关系</span></span><br><span class="line">        List&lt;PermRole&gt; perms = permRoleMapper.selectPermRoles();</span><br><span class="line">        <span class="keyword">if</span> (perms != <span class="keyword">null</span>)&#123;</span><br><span class="line">            perms.forEach((v) -&gt; permMap.put(v.getUrl(), v.getRoles()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        String url = exchange.getRequest().getURI().getPath();</span><br><span class="line">        log.info(<span class="string">"请求的url"</span> + url);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(url))&#123;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 对应跨域的预检请求直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (exchange.getRequest().getMethod() == HttpMethod.OPTIONS) &#123;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 如果在白名单中</span></span><br><span class="line">        <span class="keyword">if</span> (MatchUtil.isMatchInList(url, globalIgnoredList))&#123;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 取出用户拥有权角色</span></span><br><span class="line">        String token = getToken(exchange);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(token))&#123;</span><br><span class="line">            <span class="comment">// 没有token，不予访问</span></span><br><span class="line">            <span class="keyword">return</span> returnErrorResult(exchange, Result.error(ResultCode.UN_AUTHORIZED));</span><br><span class="line">        &#125;</span><br><span class="line">        PayloadDTO payload = getTokenData(token);</span><br><span class="line">        <span class="keyword">if</span> (payload == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> returnErrorResult(exchange, Result.error(ResultCode.UN_AUTHORIZED));</span><br><span class="line">        &#125;</span><br><span class="line">        Long userRole = payload.getRole();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 鉴权</span></span><br><span class="line">        PathMatcher pathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line">        <span class="keyword">for</span> (String pattern : permMap.keySet()) &#123;</span><br><span class="line">            <span class="comment">// 找到匹配资源</span></span><br><span class="line">            <span class="keyword">if</span> (pathMatcher.match(pattern, url)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (permMap.get(pattern).contains(userRole)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> returnErrorResult(exchange, Result.error(ResultCode.UN_AUTHORIZED));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没找到匹配资源，放行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange ServerWebExchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> sessionId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getToken</span><span class="params">(ServerWebExchange exchange)</span></span>&#123;</span><br><span class="line">        ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">        List&lt;String&gt; token = request.getHeaders().get(<span class="string">"Authorization"</span>);</span><br><span class="line">        <span class="keyword">return</span> token != <span class="keyword">null</span> ? com.naic.yun.utils.StringUtils.removePrefix(token.get(<span class="number">0</span>), <span class="string">"Bearer "</span>) : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange ServerWebExchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 需返回的Result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Mono&lt;Void&gt;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Mono&lt;Void&gt; <span class="title">returnErrorResult</span><span class="params">(ServerWebExchange exchange, Result&lt;?&gt; result)</span></span>&#123;</span><br><span class="line">        <span class="comment">//ServerHttpRequest ServerHttpResponse  Webflux不同于Web</span></span><br><span class="line">        ServerHttpResponse response = exchange.getResponse();</span><br><span class="line">        String res = JSON.toJSONString(result);</span><br><span class="line">        DataBuffer bodyDataBuffer = response.bufferFactory().wrap(res.getBytes());</span><br><span class="line">        response.getHeaders().add(<span class="string">"Content-Type"</span>, <span class="string">"text/plain;charset=UTF-8"</span>);</span><br><span class="line">        <span class="keyword">return</span> response.writeWith(Mono.just(bodyDataBuffer));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> PayloadDTO <span class="title">getTokenData</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        PayloadDTO payload;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            payload = JwtUtil.verifyTokenByHmac(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (! AuthorizationConstant.JWT_SUBJECT.equals(payload.getSub()))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (payload.getExp() &lt;= System.currentTimeMillis())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> payload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-security访问鉴权&quot;&gt;&lt;a href=&quot;#Spring-security访问鉴权&quot; class=&quot;headerlink&quot; title=&quot;Spring security访问鉴权&quot;&gt;&lt;/a&gt;Spring security访问鉴权&lt;/h1&gt;&lt;p&gt;介绍spring security源码理解和使用体会（2）&lt;/p&gt;
    
    </summary>
    
      <category term="Spring学习" scheme="http://yoursite.com/categories/Spring%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring security登录认证授权</title>
    <link href="http://yoursite.com/2021/10/02/Spring-security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"/>
    <id>http://yoursite.com/2021/10/02/Spring-security登录认证授权/</id>
    <published>2021-10-02T14:45:19.000Z</published>
    <updated>2021-10-02T15:15:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-security登录认证授权"><a href="#Spring-security登录认证授权" class="headerlink" title="Spring security登录认证授权"></a>Spring security登录认证授权</h1><p>介绍spring security源码理解和使用体会（1）</p><a id="more"></a><p>Spring security的登录认证流程主要由 <code>AbstractAuthenticationProcessingFilter</code>, <code>AbstractAuthenticationToken</code>, <code>AbstractUserDetailsAuthenticationProvider</code> 控制实现。</p><p>主要实现<strong>登录请求拦截</strong>，<strong>创建登录凭证令牌</strong>，<strong>验证登录和授权</strong>。这也是三个必不可少的环节。</p><p>Spring security默认支持表单登录，可在config文件中配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">httpSecurity</span><br><span class="line">                <span class="comment">//开启表单登录</span></span><br><span class="line">                .formLogin().loginPage(<span class="string">"/"</span>).permitAll()</span><br><span class="line">                <span class="comment">//登录失败处理</span></span><br><span class="line">                .failureHandler(loginFailureHandler)</span><br><span class="line">                <span class="comment">//登录成功处理</span></span><br><span class="line">                .successHandler(loginSuccessHandler);</span><br></pre></td></tr></table></figure><p>不过一般业务中都是以Json格式传输username和password登录。这里自定义一个Filter继承<code>UsernamePasswordAuthenticationFilter(AbstractAuthenticationProcessingFilter的默认实现)</code> 实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!request.getMethod().equals(HttpMethod.POST.name()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(<span class="string">"Authentication method not supported"</span> + request.getMethod());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//以json的形式传递参数</span></span><br><span class="line">        <span class="keyword">if</span> (request.getContentType().equals(MediaType.APPLICATION_JSON_VALUE)) &#123;</span><br><span class="line">            String username = <span class="keyword">null</span>;</span><br><span class="line">            String password = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//将传入的json数据转换成map再通过get("key")获得</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Map&lt;?, ?&gt; map = <span class="keyword">new</span> ObjectMapper().readValue(request.getInputStream(), Map.class);</span><br><span class="line">                username = ((String) map.get(<span class="string">"username"</span>));</span><br><span class="line">                password = ((String) map.get(<span class="string">"password"</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"username is empty."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            username = username.trim();</span><br><span class="line">            JwtLoginToken authRequest = <span class="keyword">new</span> JwtLoginToken(username, password);</span><br><span class="line">            <span class="comment">// 设置其他补充信息</span></span><br><span class="line">            <span class="comment">// Stores additional details about the authentication request.</span></span><br><span class="line">            <span class="comment">// These might be an IP address, certificate serial number etc.</span></span><br><span class="line">            authRequest.setDetails(<span class="keyword">new</span> WebAuthenticationDetails(request));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.attemptAuthentication(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当拦截到登录请求之后，<strong>创建一个未授权的认证凭证</strong>，交给 <code>AuthenticationManager</code>  来进行认证操作。这里AuthenticationManager主要做了一件事。从众多认证服务提供者中找到支持用户令牌tooken的provider来进行认证授权操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ProviderManager.java authenticate() </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  遍历AuthenticationProvider，找到support该类型token的provider</span></span><br><span class="line"><span class="keyword">for</span> (AuthenticationProvider provider : getProviders()) &#123;</span><br><span class="line"><span class="keyword">if</span> (!provider.supports(toTest)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (debug) &#123;</span><br><span class="line">logger.debug(<span class="string">"Authentication attempt using "</span></span><br><span class="line">+ provider.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 调用支持该token认证授权的provider的授权方法</span></span><br><span class="line">result = provider.authenticate(authentication);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">copyDetails(authentication, result);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (AccountStatusException | InternalAuthenticationServiceException e) &#123;</span><br><span class="line">prepareException(e, authentication);</span><br><span class="line"><span class="comment">// SEC-546: Avoid polling additional providers if auth failure is due to</span></span><br><span class="line"><span class="comment">// invalid account status</span></span><br><span class="line"><span class="keyword">throw</span> e;</span><br><span class="line">&#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">lastException = e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，为了实现jwt认证，代码结构清晰一点，我们自己定义一个凭证来保存我们的登录信息。相比一般的<code>UsernamePasswordAuthenticationToken</code>， 多增加一个token字段来保存我们的jwt。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtLoginToken</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationToken</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**登录用户信息*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object principal;</span><br><span class="line">    <span class="comment">/**密码*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object credentials;</span><br><span class="line">    <span class="comment">/**jwt*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String token;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个未认证的授权令牌,</span></span><br><span class="line"><span class="comment">     * 这时传入的principal是用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtLoginToken</span><span class="params">(Object principal, Object credentials)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.principal = principal;</span><br><span class="line">        <span class="keyword">this</span>.credentials = credentials;</span><br><span class="line">        <span class="keyword">this</span>.token = <span class="keyword">null</span>;</span><br><span class="line">        setAuthenticated(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtLoginToken</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.principal = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.credentials = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.token = token;</span><br><span class="line">        setAuthenticated(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个已认证的授权令牌,这个方法严格来讲应该由AuthenticationProvider来调用，认证之后再创建以授权令牌</span></span><br><span class="line"><span class="comment">     * 也就是我们写的JwtAuthenticationProvider,有它完成认证后再调用这个方法,</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 登录认证时，传入的principal为从userService中查出的UserDetails。</span></span><br><span class="line"><span class="comment">     * 参考UsernamePasswordAuthenticationToken实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtLoginToken</span><span class="params">(Object principal, Object credentials,</span></span></span><br><span class="line"><span class="function"><span class="params">                         Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(authorities);</span><br><span class="line">        <span class="keyword">this</span>.principal = principal;</span><br><span class="line">        <span class="keyword">this</span>.credentials = credentials;</span><br><span class="line">        <span class="keyword">this</span>.token = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">super</span>.setAuthenticated(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.credentials;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getPrincipal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.principal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时我们这里定义一个 <code>AbstractUserDetailsAuthenticationProvider</code> 实现类来我们定义的JwtLoginToken提供认证授权服务。</p><p>先看看 <code>AbstractUserDetailsAuthenticationProvider</code> 和其默认实现类<code>DaoAuthenticationProvider</code> 的部分源代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractUserDetailsAuthenticationProvider.java  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="comment">// Determine username</span></span><br><span class="line">String username = (authentication.getPrincipal() == <span class="keyword">null</span>) ? <span class="string">"NONE_PROVIDED"</span></span><br><span class="line">: authentication.getName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先从缓存中获取user</span></span><br><span class="line"><span class="keyword">boolean</span> cacheWasUsed = <span class="keyword">true</span>;</span><br><span class="line">UserDetails user = <span class="keyword">this</span>.userCache.getUserFromCache(username);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">cacheWasUsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取user对象</span></span><br><span class="line">user = retrieveUser(username,</span><br><span class="line">(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查token信息</span></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="keyword">return</span> createSuccessAuthentication(principalToReturn, authentication, user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Authentication <span class="title">createSuccessAuthentication</span><span class="params">(Object principal,</span></span></span><br><span class="line"><span class="function"><span class="params">Authentication authentication, UserDetails user)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Ensure we return the original credentials the user supplied,</span></span><br><span class="line"><span class="comment">// so subsequent attempts are successful even with encoded passwords.</span></span><br><span class="line"><span class="comment">// Also ensure we return the original getDetails(), so that future</span></span><br><span class="line"><span class="comment">// authentication events after cache expiry contain the details</span></span><br><span class="line"><span class="comment">// 创建已授权的token</span></span><br><span class="line">UsernamePasswordAuthenticationToken result = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(</span><br><span class="line">principal, authentication.getCredentials(),</span><br><span class="line">authoritiesMapper.mapAuthorities(user.getAuthorities()));</span><br><span class="line">result.setDetails(authentication.getDetails());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后返回已授权的令牌代表已经认证成功。</p><p>那问题来了，我们可以直接在Filter里面直接创建一个已经授权的toen，加入SecurityContext呢？</p><p>答案是可以的，这样会跳过认证过程，当是对于用户登陆，这样显然不合理；对于用户token访问倒是可以在校验token之后这样做，但是有点不符合框架逻辑。</p><ul><li>说明，不可以显示调用Token的setAuthenticated方式来进行认证</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UsernamePasswordAuthenticationToken.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthenticated</span><span class="params">(<span class="keyword">boolean</span> isAuthenticated)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isAuthenticated) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line"><span class="string">"Cannot set this token to trusted - use constructor which takes a GrantedAuthority list instead"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">super</span>.setAuthenticated(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参照<code>AbstractUserDetailsAuthenticationProvider</code> 和其默认实现类 <code>DaoAuthenticationProvider</code> ，我们定义一个 <code>JwtAuthenticationProvider</code> 。在进行验证之后，<strong>返回一个已授权的令牌</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDetailsService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        JwtLoginToken token = ((JwtLoginToken) authentication);</span><br><span class="line">        <span class="keyword">if</span> (token.getToken() != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> authenticateToken(token);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authenticateLogin(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (JwtLoginToken.class</span><br><span class="line">                .isAssignableFrom(authentication));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证用户登录信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication 认证信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Authentication&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Authentication <span class="title">authenticateLogin</span><span class="params">(JwtLoginToken authentication)</span></span>&#123;</span><br><span class="line">        UserDetails loadedUser = userService.loadUserByUsername(authentication.getName());</span><br><span class="line">        defaultCheck(loadedUser);</span><br><span class="line">        <span class="comment">// 用户名密码校验 具体逻辑</span></span><br><span class="line">        additionalAuthenticationChecks(loadedUser, authentication);</span><br><span class="line">        <span class="comment">// 构造已认证的authentication</span></span><br><span class="line">        JwtLoginToken authenticatedToken = <span class="keyword">new</span> JwtLoginToken(loadedUser, authentication.getCredentials(), authentication.getAuthorities());</span><br><span class="line">        <span class="comment">// 设置一些其他信息。Stores additional details about the authentication request. These might be an IP address, certificate serial number etc.</span></span><br><span class="line">        authenticatedToken.setDetails(authenticatedToken.getDetails());</span><br><span class="line">        <span class="keyword">return</span> authenticatedToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证用户token信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication 认证信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Authentication&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Authentication <span class="title">authenticateToken</span><span class="params">(JwtLoginToken authentication)</span></span>&#123;</span><br><span class="line">        PayloadDTO payload = JwtUtil.verifyTokenByHmac(authentication.getToken());</span><br><span class="line">        <span class="comment">// 信任该token, 在校验token成功的情况下直接放行</span></span><br><span class="line">        <span class="comment">// 根据token做其他操作   如从token中取出用户权限进行授权</span></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtLoginToken(payload.getUsername(), authentication.getCredentials(), authentication.getAuthorities());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一些默认信息的检查</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">defaultCheck</span><span class="params">(UserDetails user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!user.isAccountNonLocked()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockedException(<span class="string">"User account is locked"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!user.isEnabled()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DisabledException(<span class="string">"User is disabled"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!user.isAccountNonExpired()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AccountExpiredException(<span class="string">"User account has expired"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查密码是否正确</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDetails user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication authentication</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException 认证异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">additionalAuthenticationChecks</span><span class="params">(UserDetails userDetails, JwtLoginToken authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (authentication.getCredentials() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"Bad credentials"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String presentedPassword = authentication.getCredentials().toString();</span><br><span class="line">        <span class="keyword">if</span> (!passwordEncoder.matches(presentedPassword, userDetails.getPassword())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"Bad credentials"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>说明，默认的<code>DaoAuthenticationProvider</code> 支持的是对 <code>UsernamePasswordAuthenticationToken</code> 的认证操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractUserDetailsAuthenticationProvider.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (UsernamePasswordAuthenticationToken.class</span><br><span class="line">.isAssignableFrom(authentication));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们将我们的自定义配置通过配置文件配置即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthenticationSuccessHandler loginSuccessHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthenticationFailureHandler loginFailureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AccessDeniedHandler accessDeniedHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LogoutSuccessHandler logoutSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        httpSecurity</span><br><span class="line">                <span class="comment">//没有权限处理</span></span><br><span class="line">                .exceptionHandling().accessDeniedHandler(accessDeniedHandler)</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">//未登录处理</span></span><br><span class="line">                .exceptionHandling().authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">//退出成功处理</span></span><br><span class="line">                .logout().logoutUrl(<span class="string">"/logout"</span>).logoutSuccessHandler(logoutSuccessHandler).permitAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 禁用session</span></span><br><span class="line">        httpSecurity.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于用户自定义的filter，如果要加入spring security 的FilterChain中，必须指定加到已有的那个filter之前或者之后。</span></span><br><span class="line">        httpSecurity.addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        <span class="comment">//将自定义的过滤器(以json格式登录的过滤器)加进来，第二参数表示加到usernamePasswordAuthenticationFilter所在的位置</span></span><br><span class="line">        httpSecurity.addFilterAt(jsonAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        有3中方式可以实现动态权限控制：</span></span><br><span class="line"><span class="comment">        （1）扩展access()的SpEL表达式.  扩展access()的SpEL表达式：自定义授权逻辑myAuthService是自定义的类，canAccess是它的方法</span></span><br><span class="line"><span class="comment">        .anyRequest().access("@myAuthService.canAccess(request,authentication)")</span></span><br><span class="line"><span class="comment">        （2）自定义AccessDecisionManager.   自定义AccessDecisionManager</span></span><br><span class="line"><span class="comment">        .withObjectPostProcessor(new MyObjectPostProcessor())</span></span><br><span class="line"><span class="comment">        .anyRequest().authenticated()</span></span><br><span class="line"><span class="comment">        （3）自定义Filter：MyFilterSecurityInterceptor</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        httpSecurity.authorizeRequests().anyRequest().permitAll()</span><br><span class="line">                <span class="comment">/*.access("@userAuthentication.authenticate(request, authentication)")*/</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启跨域访问</span></span><br><span class="line">        httpSecurity.cors().disable();</span><br><span class="line">        <span class="comment">//开启模拟请求，比如API POST测试工具的测试，不开启时，API POST为报403错误</span></span><br><span class="line">        httpSecurity.csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> </span>&#123;</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">"/swagger-ui/**"</span>);</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">"/swagger-resources/**"</span>);</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">"/v3/**"</span>);</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">"/doc.html"</span>);</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">"/webjars/**"</span>);</span><br><span class="line">        <span class="comment">// 放行注册请求</span></span><br><span class="line">        web.ignoring().antMatchers(<span class="string">"/register"</span>);</span><br><span class="line">        <span class="comment">//对于在header里面增加token等类似情况，放行所有OPTIONS请求。</span></span><br><span class="line">        web.ignoring().antMatchers(HttpMethod.OPTIONS, <span class="string">"/**"</span>);</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">"/static/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> </span>&#123;</span><br><span class="line">        auth.authenticationProvider(jwtAuthenticationProvider());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">LoginFilter <span class="title">jsonAuthenticationFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        LoginFilter filter = <span class="keyword">new</span> LoginFilter();</span><br><span class="line">        <span class="comment">// 将存放身份信息bean加入</span></span><br><span class="line">        filter.setAuthenticationManager(authenticationManagerBean());</span><br><span class="line">        filter.setFilterProcessesUrl(<span class="string">"/login"</span>);</span><br><span class="line">        filter.setAuthenticationSuccessHandler(loginSuccessHandler);</span><br><span class="line">        filter.setAuthenticationFailureHandler(loginFailureHandler);</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">JwtAuthenticationFilter <span class="title">jwtAuthenticationFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        JwtAuthenticationFilter filter = <span class="keyword">new</span> JwtAuthenticationFilter();</span><br><span class="line">        filter.setAuthenticationManager(authenticationManagerBean());</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">JwtAuthenticationProvider <span class="title">jwtAuthenticationProvider</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtAuthenticationProvider(userDetailsService, <span class="keyword">new</span> BCryptPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面的Handler代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuccessHandlerImpl</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span>, <span class="title">LogoutSuccessHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXPOSE_HEADER = <span class="string">"Access-Control-Expose-Headers"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 取出登录用户返回</span></span><br><span class="line">        LoginUserDetails details = (LoginUserDetails) authentication.getPrincipal();</span><br><span class="line">        LoginUser user = details.getUser();</span><br><span class="line">        <span class="keyword">long</span> mills = System.currentTimeMillis();</span><br><span class="line">        PayloadDTO payload = <span class="keyword">new</span> PayloadDTO()</span><br><span class="line">                .setUserId(user.getId())</span><br><span class="line">                .setUsername(user.getUsername())</span><br><span class="line">                .setTeamId(user.getTeamId())</span><br><span class="line">                .setRole(user.getRoleId())</span><br><span class="line">                .setSub(AuthorizationConstant.JWT_SUBJECT)</span><br><span class="line">                .setIat(mills)</span><br><span class="line">                .setExp(mills + AuthorizationConstant.EXPIRE_TIME);</span><br><span class="line">        <span class="comment">// 回写token</span></span><br><span class="line">        response.setHeader(EXPOSE_HEADER, AuthorizationConstant.TOKE_KEYWORD);</span><br><span class="line">        response.setHeader(AuthorizationConstant.TOKE_KEYWORD, JwtUtil.generateTokenByHmac(JSON.toJSONString(payload)));</span><br><span class="line">        ResponseJsonData.response(response, Result.success(details.getUser()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> </span>&#123;</span><br><span class="line">        ResponseJsonData.response(response, Result.success());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其他handler根据需要返回对应的错误信息即可</span></span><br><span class="line">ResponseJsonData.response(response, Result.error(ResultCode.REQ_REJECT));</span><br><span class="line">ResponseJsonData.response(response, Result.error(ResultCode.UN_AUTHORIZED));</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserTeamMapper userTeamMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserCnv userCnv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRoleMapper userRoleMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RoleMapper roleMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RolePermMapper rolePermMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PermMapper permMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        User user = userMapper.selectOne(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getUsername, username));</span><br><span class="line">        LoginUser loginUser = userCnv.poToLoginUser(user);</span><br><span class="line">        <span class="keyword">if</span> (loginUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"user: "</span> + username + <span class="string">" not found."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 授权</span></span><br><span class="line">        Set&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        UserTeam userTeam = userTeamMapper.selectOne(</span><br><span class="line">                Wrappers.&lt;UserTeam&gt;lambdaQuery()</span><br><span class="line">                        .eq(UserTeam::getUserId, loginUser.getId())</span><br><span class="line">                        .eq(UserTeam::getTeamId, loginUser.getTeamId()));</span><br><span class="line">        <span class="comment">// 查询角色权限相关</span></span><br><span class="line">        <span class="keyword">if</span> (userTeam != <span class="keyword">null</span>)&#123;</span><br><span class="line">            UserRole userRole = userRoleMapper</span><br><span class="line">                    .selectOne(Wrappers.&lt;UserRole&gt;lambdaQuery()</span><br><span class="line">                            .eq(UserRole::getUserId, user.getId())</span><br><span class="line">                            .eq(UserRole::getTeamId, loginUser.getTeamId()));</span><br><span class="line">            Role role = <span class="keyword">null</span>;</span><br><span class="line">            List&lt;String&gt; perms = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (userRole != <span class="keyword">null</span>)&#123;</span><br><span class="line">                role = roleMapper.selectById(userRole.getRoleId());</span><br><span class="line">                List&lt;Long&gt; permIds = rolePermMapper</span><br><span class="line">                        .selectList(Wrappers.&lt;RolePerm&gt;lambdaQuery().eq(RolePerm::getRoleId, role.getId()))</span><br><span class="line">                        .stream().map(RolePerm::getPermId).collect(Collectors.toList());</span><br><span class="line">                <span class="keyword">if</span> (permIds.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    perms = permMapper.selectList(Wrappers.&lt;Perm&gt;lambdaQuery().in(Perm::getId, permIds)).stream()</span><br><span class="line">                            .map(Perm::getName).collect(Collectors.toList());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            loginUser.setProperties(role, perms);</span><br><span class="line">            <span class="keyword">if</span> (role != <span class="keyword">null</span>)&#123;</span><br><span class="line">                authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(role.getName()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginUserDetails(loginUser, user.getPassword(), authorities);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，补充一点，Security上下文环境(里面有主体)生命周期只限于一次请求。在FilterChain完成之后，会将SecurityContext中的内容清空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">SecurityContext contextAfterChainExecution = SecurityContextHolder</span><br><span class="line">.getContext();</span><br><span class="line"><span class="comment">// Crucial removal of SecurityContextHolder contents - do this before anything</span></span><br><span class="line"><span class="comment">// else.</span></span><br><span class="line">SecurityContextHolder.clearContext();</span><br><span class="line">repo.saveContext(contextAfterChainExecution, holder.getRequest(),</span><br><span class="line">holder.getResponse());</span><br><span class="line">request.removeAttribute(FILTER_APPLIED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-security登录认证授权&quot;&gt;&lt;a href=&quot;#Spring-security登录认证授权&quot; class=&quot;headerlink&quot; title=&quot;Spring security登录认证授权&quot;&gt;&lt;/a&gt;Spring security登录认证授权&lt;/h1&gt;&lt;p&gt;介绍spring security源码理解和使用体会（1）&lt;/p&gt;
    
    </summary>
    
      <category term="Spring学习" scheme="http://yoursite.com/categories/Spring%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Android Touch事件拦截处理机制</title>
    <link href="http://yoursite.com/2019/01/22/Android%20onTouchEvent%E4%BA%8B%E4%BB%B6%E6%8B%A6%E6%88%AA%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/01/22/Android onTouchEvent事件拦截处理机制/</id>
    <published>2019-01-22T11:20:45.533Z</published>
    <updated>2019-01-28T06:12:47.417Z</updated>
    
    <content type="html"><![CDATA[<p>Android的Touch事件在三个方法中进行分发，拦截，处理。分别是：</p><ul><li>事件分发  public boolean dispatchTouchEvent(MotionEvent ev)</li><li>事件拦截  public boolean onInterceptTouchEvent(MotionEvent ev)</li><li>事件处理  public boolean onTouchEvent(MotionEvent ev)<a id="more"></a></li></ul><p>android系统中每个View都具有这三个方法。Touch事件由ViewGroup和View完成分发拦截和处理。当Activity接收到TouchEvent事件时，调用它内部的ViewGroup对Touch事件进行分发。首先将事件传递给最顶层的ViewGroup，调用dispatchTouchEvent方法，该方法遍历其子ViewGroup或View的dispatchTouchEvent方法。</p><p>如果子View的dispatchTouchEvent方法返回true，则将事件分发给该View；如果返回false，则调用该View的onInterceptTouchEvent方法根据返回值来决定时是否拦截。若拦截，则分发结束；若不拦截，则继续遍历dispatchTouchEvent方法进行分发，直到分发结束，如果子View都不响应，则由Activity自己处理。</p><p>如果分发给某一子View，则会响应该View的onTouchEvent方法。执行完毕若返回true，则表示消费掉该touch事件。返回false则让事件向上层View继续传递，且这时候都是由onTouchEvent方法来接收，以此类推。但如果所有的onTouchEvent都返回false，那么这个时间便会消失，且接收不到下次事件。这就是为什么会说事件分发是从外到内，而事件的执行是从内到外了。</p><p>说到这里，似乎只要我们把所有的onTouchEvent都返回false，就能保证所有的子控件都响应本次Touch事件了。其实不然，这里的Touch事件，只限于Acition_Down事件，即触摸按下事件,而Aciton_UP和Action_MOVE却不会执行。一次完整的Touch事件，应该是由一个Down、一个Up和若干个Move组成的。事件分发的目的就是找到需要处理整个Touch事件的View。</p><p>注：如果在一个Action事件响应后返回了true被消费后，后面的Action才会接着响应。</p><p>最后，谈谈使用onClick和OnTouch的心得:<br>1.在设置了onClick监听器的情况下，View的clickable状态自动置为true。<br>2.onClick事件响应完成后，默认会被消耗掉。<br>3.控件设置clickable属性后，再设置onClickListener，会直接变为可点击状态。<br>4.在同时设置onClickListener和onTouchListener时，onTouch事件优先级更高，返回true的话，onclick得不到执行；但返回false的话，onclik可以执行。<br>5.自定义控件在重写onTouchEvent之后又给它加上onTouchListener，这时onTouch会优于onTouchEvent执行。</p><p>贴上三个方法的效果。<br>(1) 事件分发: public boolean dispatchTouchEvent(MotionEvent ev)<br>当Touch事件发生时，Activity的dispatchTouchEvent()方法会以隧道方式(从根节点依次往下传递直到最内层子节点，或在中间某一节点中由于某一条件停止传递)将事件传递给最外层View的dispatchTouchEvent()方法，并由该View的dispatchTouchEvent()方法对事件进行分发。</p><ul><li>return true ：事件会分发给当前View并由dispatchTouchEvent()方法进行消费，同时事件会停止向下传递。</li><li>return false ：将事件返还给当前View的上一级的onTouchEvent()进行消费。(这个上一级可能是Activity，也可能是父View)</li><li>return super.dispatchTouchEvent(ev) ：事件会自动的分发给当前View的onInterceptTouchEvent方法。</li></ul><p>(2) 事件拦截: public boolean onInterceptTouchEvent(MotionEvent ev)<br>拦截事件，阻止事件的分发。</p><ul><li>return true ：将对事件进行拦截，并将拦截到的事件交由当前View的onTouchEvent()进行处理。</li><li>return false ：将对事件进行放行，当前View上的事件会被传递到子View 上，再由子View的dispatchTouchEvent()来继续对这个事件进行分发。</li><li>return super.onInterceptTouchEvent(ev) ：事件默认会被拦截，并将拦截到的事件交由当前View的onTouchEvent()进行处理。</li></ul><p>(3) 事件响应: public boolean onTouchEvent(MotionEvent ev)<br>响应事件，做出相应的处理。</p><ul><li>return false ：事件将会从当前View向上传递，并且都是由上层View的onTouchEvent()来接收。</li><li>return true ：接收并消费掉该事件。</li><li>return super.onTouchEvent(ev) ：默认处理事件的逻辑。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android的Touch事件在三个方法中进行分发，拦截，处理。分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件分发  public boolean dispatchTouchEvent(MotionEvent ev)&lt;/li&gt;
&lt;li&gt;事件拦截  public boolean onInterceptTouchEvent(MotionEvent ev)&lt;/li&gt;
&lt;li&gt;事件处理  public boolean onTouchEvent(MotionEvent ev)
    
    </summary>
    
      <category term="Android学习" scheme="http://yoursite.com/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android 原理" scheme="http://yoursite.com/tags/Android-%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Android浅析DrawerLayout使用ActionBarDrawerToggle实现侧滑菜单动画</title>
    <link href="http://yoursite.com/2019/01/12/Android%E6%B5%85%E6%9E%90DrawerLayout%E4%BD%BF%E7%94%A8ActionBarDrawerToggle%E5%AE%9E%E7%8E%B0%E4%BE%A7%E6%BB%91%E8%8F%9C%E5%8D%95%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2019/01/12/Android浅析DrawerLayout使用ActionBarDrawerToggle实现侧滑菜单动画/</id>
    <published>2019-01-12T09:25:59.172Z</published>
    <updated>2019-01-23T07:15:48.428Z</updated>
    
    <content type="html"><![CDATA[<p>ActionBarDrawerLayoutToggle可以将DrawerLayout和ActionBar框架结合在一起实现侧滑菜单滑动时的动画效果。符合Google提出的Material Design设计风格。<br><a id="more"></a><br>首先，DrawLayout实现点击出现侧滑菜单可以用点击HomeAsUp按钮实现。可以在Activity里重写onOptionsItemSelected()方法为HomeAsUp按钮设置监听器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(item.getItemId())&#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">case</span> android.R.id.home:</span><br><span class="line">                drawerLayout.openDrawer(GravityCompat.START);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>注：HomeAsUp按钮的id永远是android.R.id.home。</p><p>另外，HomeAsUp按钮的默认图标是一个向左的箭头，可以对图标样式进行更改。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">actionBar.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</span><br><span class="line">actionBar.setHomeAsUpIndicator(R.drawable.ic_picture);<span class="comment">//ic_picture是替换的图片</span></span><br></pre></td></tr></table></figure></p><p>设置动画的话，须在Activity里创建一个ActionBarDrawerLayoutToggle用来监视DrawerLayout的状态，然后根据DrawLayout的状态来改变DrawerArrowDrawable的绘制状态。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ActionBarDrawerToggle actionBarDrawerToggle = <span class="keyword">new</span> ActionBarDrawerToggle(<span class="keyword">this</span>, drawerLayout,toolbar, <span class="number">0</span> ,<span class="number">0</span>);</span><br><span class="line">drawerLayout.addDrawerListener(actionBarDrawerToggle);</span><br><span class="line">actionBarDrawerToggle.syncState();</span><br></pre></td></tr></table></figure></p><p>其中，先调用ActionBarDrawerToggle的构造函数。如果使用ActionBar，该方法接收4个参数，如果使用ToolBar，则是5个，参数分别是托管Drewerlayout的活动、需要绑定的DrawerLayout、ToolBar、和两个String资源(int)用于描述可访问性的打开侧滑菜单操作，默认可传递0。<br>然后，调用DrawerLayout.addDrawerListener()方法将DrawLayout与ActionBarDrawerToggle绑定在一起。<br>最后调用ActionBarDrawerToggle.syncState()方法将ActionBarDrawerToggle与绑定的DrawerLayout状态同步。不过安卓开发文档上Google推荐的写法写在Activity的onPostCreate()回调方法里。如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPostCreate(savedInstanceState);</span><br><span class="line">        actionBarDrawerToggle.syncState();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>进去看addDrawerListener()的源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDrawerListener</span><span class="params">(@NonNull DrawerLayout.DrawerListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.mListeners == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.mListeners = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.mListeners.add(listener);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>其中将drawerLayout的监听器设置为了ActionBarDrawerToggle，ActionBarDrawerToggle实现了DrawerLayout.DrawerListener接口。</p><p>点进去DrawerLayout.DrawerListener<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DrawerListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onDrawerSlide</span><span class="params">(@NonNull View var1, <span class="keyword">float</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onDrawerOpened</span><span class="params">(@NonNull View var1)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onDrawerClosed</span><span class="params">(@NonNull View var1)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onDrawerStateChanged</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>该接口有四个成员方法。分别对应侧滑菜单滑动、打开、关闭、状态改变的四个回调方法。<br>点开ActionBarDrawerToggle的onDrawerSlide()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawerSlide</span><span class="params">(View drawerView, <span class="keyword">float</span> slideOffset)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mDrawerSlideAnimationEnabled) &#123;</span><br><span class="line">            <span class="keyword">this</span>.setPosition(Math.min(<span class="number">1.0F</span>, Math.max(<span class="number">0.0F</span>, slideOffset)));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.setPosition(<span class="number">0.0F</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>其中第二个参数是滑动的偏移量，范围是0F到1F，可以看到，将偏移量传递给了setPosition()函数，继续跟踪该方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setPosition</span><span class="params">(<span class="keyword">float</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (position == <span class="number">1.0F</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mSlider.setVerticalMirror(<span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="number">0.0F</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mSlider.setVerticalMirror(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.mSlider.setProgress(position);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>mSlider是DrawerArrowDrawable的一个实例，DrawerArrowDrawable继承自Drawable，是动画的具体样式。这里，根据偏移量的值，选择调用setVerticalMirror()和setProgress()方法。继续跟踪分析。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVerticalMirror</span><span class="params">(<span class="keyword">boolean</span> verticalMirror)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mVerticalMirror != verticalMirror) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mVerticalMirror = verticalMirror;</span><br><span class="line">            <span class="keyword">this</span>.invalidateSelf();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProgress</span><span class="params">(@FloatRange(from = <span class="number">0.0</span>D,to = <span class="number">1.0</span>D)</span> <span class="keyword">float</span> progress) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mProgress != progress) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mProgress = progress;</span><br><span class="line">            <span class="keyword">this</span>.invalidateSelf();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>两个函数都调用了Drawable的invalidateSelf()方法进行重绘。<br>setVerticalMirror()根据传入参数的不同选择将canvas翻转到动画开始或者结束的画面，对应侧滑菜单动画的开始和结束。<br>setProgress()根据偏移量设置滑动的进度然后进行重绘。</p><p>讲到这里，更改HomeAsUp按钮图标时如果要设置成三条横线的图标时有个简单的方法。在setHomeAsUpIndicator()方法里传入DrawerArrowDrawable的实例，会直接显示DrawerArrowDrawable的动画初始界面，也就是三条横线的样式。代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">actionBar.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</span><br><span class="line">actionBar.setHomeAsUpIndicator(<span class="keyword">new</span> DrawerArrowDrawable(<span class="keyword">this</span>));</span><br></pre></td></tr></table></figure></p><p>另外，ActionBarDrawerToggle好像也有一个setHomeAsUpIndicator()方法，可以用来修改HomeAsUp图标样式，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ActionBarDrawerToggle actionBarDrawerToggle = <span class="keyword">new</span> ActionBarDrawerToggle(<span class="keyword">this</span>, drawerLayout,</span><br><span class="line">toolbar, <span class="number">0</span> ,<span class="number">0</span>);</span><br><span class="line">actionBarDrawerToggle.setDrawerIndicatorEnabled(<span class="keyword">false</span>);</span><br><span class="line">actionBarDrawerToggle.setHomeAsUpIndicator(R.drawable.ic_menu); <span class="comment">//ic_menu为自己准备的图片</span></span><br><span class="line">actionBarDrawerToggle.setToolbarNavigationClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                drawerLayout.openDrawer(GravityCompat.START);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">drawerLayout.addDrawerListener(actionBarDrawerToggle);</span><br><span class="line">actionBarDrawerToggle.syncState();</span><br></pre></td></tr></table></figure></p><p>不过使用之前要调用setDrawerIndicatorEnabled()方法，并传入false，意思是让actionBarDrawerToggle不使用系统图标。而且，还要为其设置单独的监听器，不然没有点击效果。然后又因为没有使用定义好了的图标，这个没有侧滑菜单动画效果，个人感觉没啥用，也许是本人能力有限。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ActionBarDrawerLayoutToggle可以将DrawerLayout和ActionBar框架结合在一起实现侧滑菜单滑动时的动画效果。符合Google提出的Material Design设计风格。&lt;br&gt;
    
    </summary>
    
      <category term="Android UI" scheme="http://yoursite.com/categories/Android-UI/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android O 发送通知</title>
    <link href="http://yoursite.com/2018/11/27/Android%20O%E5%8F%91%E9%80%81%E9%80%9A%E7%9F%A5%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/11/27/Android O发送通知方法/</id>
    <published>2018-11-27T11:39:02.890Z</published>
    <updated>2019-01-23T07:20:04.768Z</updated>
    
    <content type="html"><![CDATA[<p>几乎Android系统的每一个版本都会对通知这部分功能进行或多或少的修改，API不稳定性在通知上面突显的尤为严重。<br><a id="more"></a></p><p>首先，我们先回顾下Android N发送通知的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">NotificationManager manager=(NotificationManager)</span><br><span class="line">                getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">        Notification notification=<span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</span><br><span class="line">                .setContentTitle(<span class="string">"this is a title"</span>)</span><br><span class="line">                .setContentText(<span class="string">"this is text"</span>)</span><br><span class="line">                .setWhen(System.currentTimeMillis())</span><br><span class="line">                .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                .setLargeIcon(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher))</span><br><span class="line">                .build();</span><br><span class="line">        manager.notify(<span class="number">1</span>,notification);</span><br></pre></td></tr></table></figure></p><p>首先用NotificationCompat.Builder()构造一个NotificationManager,然后对创建的通知notify(),notify()接收两个参数，第一个参数是id(保证每个通知的id不同即可)，第二个参数则是Notification对象。</p><p>而Android O弃用了NotificationCompat.Builder(Context)函数,被NotificationCompat.builder(Context,String)所取代，其中第二个String参数是渠道id。如果用户环境低于Android O，第二个参数将被忽略。</p><p>从Android 8.0系统开始，Google引入了通知渠道这个概念。</p><p>什么是通知渠道呢？顾名思义，就是每条通知都要属于一个对应的渠道。开发者可以自由地创建当前App拥有哪些通知渠道，但是这些通知渠道的控制权都是掌握在用户手上的。用户可以自由地选择这些通知渠道的重要程度，是否响铃、是否振动、或者是否要关闭这个渠道的通知。拥有了这些控制权之后，用户就再也不用害怕那些垃圾推送消息的打扰了，因为用户可以自主地选择自己关心哪些通知、不关心哪些通知。</p><p>举个具体的例子，我希望可以即时收到支付宝的收款信息，因为我不想错过任何一笔收益，但是我又不想收到支付宝给我推荐的周围美食，因为我没钱只吃得起食堂。这种情况，支付宝就可以创建两种通知渠道，一个收支，一个推荐，而我作为用户对推荐类的通知不感兴趣，那么我就可以直接将推荐通知渠道关闭，这样既不影响我关心的通知，又不会让那些我不关心的通知来打扰我了。</p><p>源代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//创建通知渠道</span></span><br><span class="line">        <span class="keyword">if</span>(Build.VERSION.SDK_INT&gt;=Build.VERSION_CODES.O)&#123;</span><br><span class="line">            String channelId1=<span class="string">"chat"</span>;</span><br><span class="line">            String channelName1=<span class="string">"聊天消息"</span>;</span><br><span class="line">            NotificationChannel channel1=<span class="keyword">new</span> NotificationChannel(channelId1,channelName1,</span><br><span class="line">                    NotificationManager.IMPORTANCE_HIGH);</span><br><span class="line">            channel1.setShowBadge(<span class="keyword">true</span>);</span><br><span class="line">            String channelId2=<span class="string">"subscribe"</span>;</span><br><span class="line">            String channelName2=<span class="string">"订阅消息"</span>;</span><br><span class="line">            NotificationChannel channel2=<span class="keyword">new</span> NotificationChannel(channelId2,channelName2,</span><br><span class="line">                    NotificationManager.IMPORTANCE_DEFAULT);</span><br><span class="line">            channel2.setShowBadge(<span class="keyword">true</span>);</span><br><span class="line">            NotificationManager manager=(NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">            manager.createNotificationChannel(channel1);</span><br><span class="line">            manager.createNotificationChannel(channel2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * send message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendChatMsg</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        NotificationManager manager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">            NotificationChannel channel = manager.getNotificationChannel(<span class="string">"chat"</span>);</span><br><span class="line">            <span class="keyword">if</span> (channel.getImportance() == NotificationManager.IMPORTANCE_NONE) &#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_CHANNEL_NOTIFICATION_SETTINGS);</span><br><span class="line">                intent.putExtra(Settings.EXTRA_APP_PACKAGE, getPackageName());</span><br><span class="line">                intent.putExtra(Settings.EXTRA_CHANNEL_ID, channel.getId());</span><br><span class="line">                startActivity(intent);</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"请手动将通知打开"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Notification notification=<span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>,<span class="string">"chat"</span>)</span><br><span class="line">                .setContentTitle(<span class="string">"收到一条聊天消息"</span>)</span><br><span class="line">                .setContentText(<span class="string">"hello"</span>)</span><br><span class="line">                .setWhen(System.currentTimeMillis())</span><br><span class="line">                .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                .setLargeIcon(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher))</span><br><span class="line">                .setAutoCancel(<span class="keyword">true</span>)</span><br><span class="line">                .setNumber(<span class="number">1</span>)</span><br><span class="line">                .build();</span><br><span class="line">        manager.notify(<span class="number">1</span>,notification);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSubscribeMsg</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        NotificationManager manager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">        Notification notification=<span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>,<span class="string">"subscribe"</span>)</span><br><span class="line">                .setContentTitle(<span class="string">"收到一条订阅消息"</span>)</span><br><span class="line">                .setContentText(<span class="string">"Vans高帮鞋大力促销中"</span>)</span><br><span class="line">                .setWhen(System.currentTimeMillis())</span><br><span class="line">                .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                .setLargeIcon(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher))</span><br><span class="line">                .setAutoCancel(<span class="keyword">true</span>)</span><br><span class="line">                .setNumber(<span class="number">1</span>)</span><br><span class="line">                .build();</span><br><span class="line">        manager.notify(<span class="number">2</span>,notification);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>布局文件中只有两个按钮，代码中sendChaMsg和sendSubscribeMsg分别为两个按钮的点击事件。</p><p>可以看到，我首先在onCreate函数里面创建了两个渠道并设定相应的优先级，渠道id分别为chat和subscribe，然后再点击事件里面创建通知，创建通知时应该说明该通知属于哪一个渠道，在NotificationCompat.Builder构造时传入相应的渠道id。最后通过NotificationManager发送。</p><p>注:<br>在老版本中构造通知时使用的是Notification，<br>新版本使用的是Notification.Builder,<br>从Android 7.0开始，Android在appcompat-v7库中提供了一个NotificationCompat类来处理新老版本的兼容问题。</p><p>其中创建channel时，还调用了Channel.setShowBadge函数，目的是让该渠道发送的消息在应用图标上显示未读角标。发送消息时在NotificationCompat.Builder中调用setNumber(int number)即可显示未读数量,可以调用setBadgeIconType(int icon)设置角标样式，不设置为默认样式。</p><p>另外，Android还赋予了开发者读取通知渠道配置的权限。如果用户不小心将某个很重要的渠道发送通知的开关给关闭了，这时候就可以提示用户手动去更改消息渠道开关。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (channel.getImportance() == NotificationManager.IMPORTANCE_NONE) &#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_CHANNEL_NOTIFICATION_SETTINGS);</span><br><span class="line">                intent.putExtra(Settings.EXTRA_APP_PACKAGE, getPackageName());</span><br><span class="line">                intent.putExtra(Settings.EXTRA_CHANNEL_ID, channel.getId());</span><br><span class="line">                startActivity(intent);</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"请手动将通知打开"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>附:<br>NotificationChannel方法列表</p><ul><li>getId() —  获取 ChannleId</li><li>enableLights() —  开启指示灯，如果设备有的话。</li><li>setLightColor() —  设置指示灯颜色</li><li>enableVibration() —  开启震动</li><li>setVibrationPattern() —  设置震动频率</li><li>setImportance() —  设置频道重要性</li><li>getImportance() —  获取频道重要性</li><li>setSound() —  设置声音</li><li>getSound() —  获取声音</li><li>setGroup() —  设置 ChannleGroup</li><li>getGroup() —  得到 ChannleGroup</li><li>setBypassDnd() —  设置绕过免打扰模式</li><li>canBypassDnd() —  检测是否绕过免打扰模式</li><li>getName() —  获取名称</li><li>setLockScreenVisibility() —  设置是否应在锁定屏幕上显示此频道的通知</li><li>getLockscreenVisibility() —  检测是否应在锁定屏幕上显示此频道的通知</li><li>setShowBadge() 设置是否显示角标</li><li>canShowBadge() —  检测是否显示角标</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几乎Android系统的每一个版本都会对通知这部分功能进行或多或少的修改，API不稳定性在通知上面突显的尤为严重。&lt;br&gt;
    
    </summary>
    
      <category term="Android学习" scheme="http://yoursite.com/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
</feed>
